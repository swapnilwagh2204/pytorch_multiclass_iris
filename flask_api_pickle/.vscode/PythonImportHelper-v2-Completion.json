[
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "Variable",
        "importPath": "torch.autograd",
        "description": "torch.autograd",
        "isExtraImport": true,
        "detail": "torch.autograd",
        "documentation": {}
    },
    {
        "label": "load_iris",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "to_categorical",
        "importPath": "keras.utils",
        "description": "keras.utils",
        "isExtraImport": true,
        "detail": "keras.utils",
        "documentation": {}
    },
    {
        "label": "Tensor",
        "importPath": "torch.functional",
        "description": "torch.functional",
        "isExtraImport": true,
        "detail": "torch.functional",
        "documentation": {}
    },
    {
        "label": "torch.nn.functional",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.nn.functional",
        "description": "torch.nn.functional",
        "detail": "torch.nn.functional",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 6,
        "importPath": "flask_api",
        "description": "flask_api",
        "peekOfCode": "class Model(nn.Module):\n        def __init__(self, input_dim):\n            super(Model, self).__init__()\n            self.layer1 = nn.Linear(input_dim,50)\n            self.layer2 = nn.Linear(50, 20)\n            self.layer3 = nn.Linear(20, 3)\n        def forward(self, x):\n            x = F.relu(self.layer1(x))\n            x = F.relu(self.layer2(x))\n            x = F.softmax(self.layer3(x)) # To check with the loss function",
        "detail": "flask_api",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "flask_api",
        "description": "flask_api",
        "peekOfCode": "def index():\n    if request.get_json() is not None:\n        content=request.get_json(silent=True)\n        sepal_length =content['sepal_length']\n        sepal_width =content['sepal_width']\n        petal_length =content['petal_length']\n        petal_width =content['petal_width']\n    elif request.method=='POST':    \n        sepal_length=float(request.form['sl'])\n        sepal_width=float(request.form['sw'])",
        "detail": "flask_api",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "flask_api",
        "description": "flask_api",
        "peekOfCode": "app = Flask(__name__)\nclass Model(nn.Module):\n        def __init__(self, input_dim):\n            super(Model, self).__init__()\n            self.layer1 = nn.Linear(input_dim,50)\n            self.layer2 = nn.Linear(50, 20)\n            self.layer3 = nn.Linear(20, 3)\n        def forward(self, x):\n            x = F.relu(self.layer1(x))\n            x = F.relu(self.layer2(x))",
        "detail": "flask_api",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "flask_api",
        "description": "flask_api",
        "peekOfCode": "model = Model(features_train.shape[1])\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\nloss_fn = nn.CrossEntropyLoss()\nepochs = 100\nx_train, y_train = Variable(torch.from_numpy(features_train)).float(), Variable(torch.from_numpy(labels_train)).long()\nfor epoch in range(1, epochs+1):\n    # print (\"Epoch #\",epoch)\n    y_pred = model(x_train)\n    loss = loss_fn(y_pred, y_train)\n    # print_(loss.item())",
        "detail": "flask_api",
        "documentation": {}
    },
    {
        "label": "optimizer",
        "kind": 5,
        "importPath": "flask_api",
        "description": "flask_api",
        "peekOfCode": "optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\nloss_fn = nn.CrossEntropyLoss()\nepochs = 100\nx_train, y_train = Variable(torch.from_numpy(features_train)).float(), Variable(torch.from_numpy(labels_train)).long()\nfor epoch in range(1, epochs+1):\n    # print (\"Epoch #\",epoch)\n    y_pred = model(x_train)\n    loss = loss_fn(y_pred, y_train)\n    # print_(loss.item())\n    # Zero gradients",
        "detail": "flask_api",
        "documentation": {}
    },
    {
        "label": "loss_fn",
        "kind": 5,
        "importPath": "flask_api",
        "description": "flask_api",
        "peekOfCode": "loss_fn = nn.CrossEntropyLoss()\nepochs = 100\nx_train, y_train = Variable(torch.from_numpy(features_train)).float(), Variable(torch.from_numpy(labels_train)).long()\nfor epoch in range(1, epochs+1):\n    # print (\"Epoch #\",epoch)\n    y_pred = model(x_train)\n    loss = loss_fn(y_pred, y_train)\n    # print_(loss.item())\n    # Zero gradients\n    optimizer.zero_grad()",
        "detail": "flask_api",
        "documentation": {}
    },
    {
        "label": "epochs",
        "kind": 5,
        "importPath": "flask_api",
        "description": "flask_api",
        "peekOfCode": "epochs = 100\nx_train, y_train = Variable(torch.from_numpy(features_train)).float(), Variable(torch.from_numpy(labels_train)).long()\nfor epoch in range(1, epochs+1):\n    # print (\"Epoch #\",epoch)\n    y_pred = model(x_train)\n    loss = loss_fn(y_pred, y_train)\n    # print_(loss.item())\n    # Zero gradients\n    optimizer.zero_grad()\n    loss.backward() # Gradients",
        "detail": "flask_api",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "flask_api",
        "description": "flask_api",
        "peekOfCode": "x_test = Variable(torch.from_numpy(features_test)).float()\npred = model(x_test)\npred = pred.detach().numpy()\nsaving the model \ntorch.save(model, \"swap.pkl\")\n'''\n@app.route('/',methods=['GET', 'POST'])\ndef index():\n    if request.get_json() is not None:\n        content=request.get_json(silent=True)",
        "detail": "flask_api",
        "documentation": {}
    },
    {
        "label": "pred",
        "kind": 5,
        "importPath": "flask_api",
        "description": "flask_api",
        "peekOfCode": "pred = model(x_test)\npred = pred.detach().numpy()\nsaving the model \ntorch.save(model, \"swap.pkl\")\n'''\n@app.route('/',methods=['GET', 'POST'])\ndef index():\n    if request.get_json() is not None:\n        content=request.get_json(silent=True)\n        sepal_length =content['sepal_length']",
        "detail": "flask_api",
        "documentation": {}
    },
    {
        "label": "pred",
        "kind": 5,
        "importPath": "flask_api",
        "description": "flask_api",
        "peekOfCode": "pred = pred.detach().numpy()\nsaving the model \ntorch.save(model, \"swap.pkl\")\n'''\n@app.route('/',methods=['GET', 'POST'])\ndef index():\n    if request.get_json() is not None:\n        content=request.get_json(silent=True)\n        sepal_length =content['sepal_length']\n        sepal_width =content['sepal_width']",
        "detail": "flask_api",
        "documentation": {}
    }
]